{
    // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    //     "scope": "javascript,typescript",
    //     "prefix": "log",
    //     "body": [
    //         "console.log('$1');",
    //         "$2"
    //     ],
    //     "description": "Log output to console"
    // }


    // JAVASCRIPT
    "log_variable": {
        "prefix": ["cl"],
         "body": [
             "console.log({$1});",
         ],
         "description": "Log output to console"
    },
    "log_text": {
        "prefix": ["cll"],
         "body": [
             "console.log(\"$1\");",
         ],
         "description": "Log output to console"
    },

    // PHP
    "pif": {
        "prefix": "pif",
        "body": [
            
            "<? if($1): ?>",
            "\t$2",
            "<? endif; ?>",
            
            
        ],
        "description": "open and close php if"
    },
    "vd": {
        "prefix": "vdump",
         "body": [
             "echo '<pre>',var_dump($1),'</pre>';",

         ],
         "description": "var_dump"
    },
    "<?=  ?>": {
        "prefix": "<?=",
         "body": [
             "<?= $1 ?>",

         ],
         "description": ""
    },
    "gtp": {
        "prefix": "gtp",
        "body": [
            "get_template_part('template-parts/$1');"
        ],
        "description": "get_template_part"
    },
    "<??": {
        "prefix": "<??",
        "body": [
            "<? /* $1 */ ?>"
        ],
        "description": "comment"
    },

    // REACT
    "useState": {
        "prefix": ["const", "usestate"],
        "body": [
            "const [$1, set${1/(.*)/${1:/capitalize}/}] = useState($2);"
        ]
    },
    "useEffect": {
		"prefix": "useeffect",
		"body": [
			"useEffect(() => {",
			"\t$1",
			"}, [$2])"
		],
		"description": "react useEffect"
	},
    "react typescript component": {
		"prefix": "reactTypescriptComp",
		"body": [
			"interface Props{",
				"\t",
			"}",
			"const ${1:Component} = ({  }: Props) => {",
			"",
			"",
				"\treturn (",
					"\t\t<section className=\"\">",
						"\t\t\t",
					"\t\t</section>",
				"\t)",
			"}",
			"export default ${1:Component}",
		],
		"description": "react typescript component"
	}
}
